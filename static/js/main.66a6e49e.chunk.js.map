{"version":3,"sources":["serviceWorker.js","components/HomePage.js","components/LoginPage.js","App.js","reducer.js","index.js"],"names":["Boolean","window","location","hostname","match","Home","props","state","logout","clicklogout","bind","this","setState","Styles","table","fontSize","className","style","float","onClick","to","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","users","map","row","key","name","scope","id","age","gender","email","phoneNo","React","Component","connect","LoginPage","username","password","loggingIn","incorrect","handleChange","handleSubmit","e","target","value","remainders","preventDefault","onSubmit","htmlFor","type","onChange","App","path","exact","strict","initialState","remaindersReducer","action","payload","store","createStore","ReactDom","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.66a6e49e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nclass Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n           logout: false\r\n        };\r\n        this.clicklogout = this.clicklogout.bind(this);\r\n    }\r\n\r\n    // logout event\r\n    clicklogout() {\r\n        this.setState({\r\n            logout: true,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const Styles =({\r\n            table: {\r\n                fontSize: '1.5rem',\r\n            },\r\n          });\r\n          const logout = this.state.logout;\r\n        return (\r\n            \r\n            <div className=\"col-md-6 col-md-offset-3\">\r\n                <h2>Employee list</h2>\r\n                <div className=\"\" style ={{float: 'right'}} >\r\n                        <button className=\"btn btn-primary\" onClick={this.clicklogout}>Logout</button>\r\n                        {logout && (\r\n                            <Redirect to={'/'}/>\r\n                        )}\r\n                </div>\r\n                <TableContainer component={Paper}>\r\n                <Table aria-label=\"simple table\">\r\n                    <TableHead>\r\n                    <TableRow>\r\n                        <TableCell style = {Styles.table}> Id</TableCell>\r\n                        <TableCell style = {Styles.table} align=\"right\">Name</TableCell>\r\n                        <TableCell style = {Styles.table} align=\"right\">Age</TableCell>\r\n                        <TableCell style = {Styles.table} align=\"right\">Gender</TableCell>\r\n                        <TableCell style = {Styles.table} align=\"right\">Email</TableCell>\r\n                        <TableCell style = {Styles.table} align=\"right\">PhoneNo</TableCell>\r\n                    </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                    {this.props.users.map((row) => (\r\n                        <TableRow key={row.name}>\r\n                        <TableCell style = {Styles.table} component=\"th\" scope=\"row\">\r\n                            {row.name}\r\n                        </TableCell>\r\n                        <TableCell style = {Styles.table} align=\"right\">{row.id}</TableCell>\r\n                        <TableCell style = {Styles.table} align=\"right\">{row.age}</TableCell>\r\n                        <TableCell style = {Styles.table} align=\"right\">{row.gender}</TableCell>\r\n                        <TableCell style = {Styles.table} align=\"right\">{row.email}</TableCell>\r\n                        <TableCell style = {Styles.table} align=\"right\">{row.phoneNo}</TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                    </TableBody>\r\n                </Table>\r\n                </TableContainer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n//accessing employee list from redux store\r\nconst matchStatetoProps = state => {\r\n    return{\r\n        users: state.users\r\n    };\r\n};\r\n\r\nexport default connect(matchStatetoProps)(Home)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router';\r\n\r\nclass LoginPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            loggingIn: false,\r\n            incorrect: false,\r\n        };\r\n      \r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    //set username and password state of entered in UI for comparison\r\n    handleChange(e) {\r\n        const { name, value } = e.target;\r\n        this.setState({ [name]: value });\r\n        this.setState({\r\n         \r\n            incorrect: false,\r\n          \r\n        });\r\n    }\r\n\r\n    //check whether the entered username and password matches with the redux login data(hruday@gmail.com and hruday123)\r\n    handleSubmit(e) {\r\n        if(this.state.username === this.props.remainders.username && this.state.password === this.props.remainders.password){\r\n            this.setState({loggingIn: true});\r\n        }\r\n        else if(this.state.username !== this.props.remainders.username){\r\n            this.setState({\r\n                incorrect: true,\r\n                loggingIn:false\r\n            });\r\n            e.preventDefault();\r\n        }\r\n        else if(this.state.password !== this.props.remainders.password){\r\n            this.setState({\r\n                incorrect: true,\r\n                loggingIn:false\r\n            });\r\n            e.preventDefault();\r\n        }\r\n        else{\r\n            this.setState({\r\n          \r\n            loggingIn:false\r\n        });\r\n        e.preventDefault();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { username, password ,incorrect} = this.state;\r\n        const loggingIn = this.state.loggingIn;\r\n        return (\r\n            <div className=\"col-md-6 col-md-offset-3\">\r\n                <h2>Login</h2>\r\n                <form name=\"form\" onSubmit={this.handleSubmit}>\r\n                    <div className={'form-group' + (incorrect ? ' has-error' : '')}>\r\n                        <label htmlFor=\"username\">Username</label>\r\n                        <input type=\"text\" className=\"form-control\" name=\"username\" value={username} onChange={this.handleChange} />\r\n                        {!username &&\r\n                            <div className=\"help-block\">Username is required</div>\r\n                        }\r\n                    </div>\r\n                    <div className={'form-group' + (incorrect ? ' has-error' : '')}>\r\n                        <label htmlFor=\"password\">Password</label>\r\n                        <input type=\"password\" className=\"form-control\" name=\"password\" value={password} onChange={this.handleChange} />\r\n                        {!password &&\r\n                            <div className=\"help-block\">Password is required</div>\r\n                        }\r\n                        {incorrect &&\r\n                            <div className=\"help-block\">Incorrect username / password!</div>\r\n                        }\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <button className=\"btn btn-primary\">Login</button>\r\n                        {loggingIn && (\r\n                            <Redirect to={'/home'}/>\r\n                        )}\r\n                    </div>\r\n                </form>\r\n               \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n//accessing login username and password from redux store\r\nconst matchStatetoProps = state => {\r\n    return{\r\n        remainders: state.remainders\r\n    };\r\n};\r\n\r\nexport default connect(matchStatetoProps)(LoginPage)","import React, { Component } from 'react';\n// import './App.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport Route  from 'react-router-dom/Route';\nimport Home from './components/HomePage';\nimport LoginPage from './components/LoginPage';\n// import Login from './components/LoginPage';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Route path=\"/\" exact strict component={LoginPage}/>\n          <Route path=\"/home\" exact strict component={Home}/>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","const initialState = {\r\n    remainders : {\r\n        \"username\": \"hruday@gmail.com\",\r\n        \"password\": \"hruday123\"\r\n    },\r\n    users:[{\r\n        \"id\":1,\r\n        \"name\":\"test1\",\r\n        \"age\" : \"11\",\r\n        \"gender\":\"male\",\r\n        \"email\" : \"test1@gmail.com\",\r\n        \"phoneNo\" : \"9415346313\"\r\n        },\r\n        {\r\n        \"id\" : 2,\r\n        \"name\":\"test2\",\r\n        \"age\" : \"12\",\r\n        \"gender\":\"male\",\r\n        \"email\" : \"test2@gmail.com\",\r\n        \"phoneNo\" : \"9415346314\"\r\n        },\r\n        {\r\n        \"id\":3,\r\n        \"name\":\"test3\",\r\n        \r\n        \"age\" : \"13\",\r\n        \"gender\":\"male\",\r\n        \"email\" : \"test3@gmail.com\",\r\n        \"phoneNo\" : \"9415346315\"\r\n        },\r\n        {\r\n        \"id\":4,\r\n        \"name\":\"test4\",\r\n        \"age\" : \"14\",\r\n        \"gender\":\"male\",\r\n        \"email\" : \"test4@gmail.com\",\r\n        \"phoneNo\" : \"9415346316\"\r\n        },\r\n        {\r\n        \"id\":5,\r\n        \"name\":\"test5\",\r\n        \"age\" : \"15\",\r\n        \"gender\":\"male\",\r\n        \"email\" : \"test5@gmail.com\",\r\n        \"phoneNo\" : \"9415346317\"\r\n        },\r\n        {\r\n        \"id\":6,\r\n        \"name\":\"test6\",\r\n        \"age\" : \"16\",\r\n        \"gender\":\"male\",\r\n        \"email\" : \"test6@gmail.com\",\r\n        \"phoneNo\" : \"9415346318\"\r\n        }\r\n        ]\r\n};\r\n\r\nconst remaindersReducer = (state = initialState,action) => {\r\n    switch(action.type){\r\n        case \"ADD_REMINDER\":\r\n            return{\r\n                ...state,\r\n                remainders: [...state.remainders, action.payload],\r\n                users: [...state.users, action.payload]\r\n            };\r\n            default:\r\n                return state;\r\n    }\r\n};\r\n\r\nexport default remaindersReducer","\nimport * as serviceWorker from './serviceWorker';\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport ReactDom from \"react-dom\"\nimport App  from './App';\nimport { createStore } from 'redux';\nimport remaindersReducer from './reducer';\n\n\n//createing a store\nconst store = createStore(remaindersReducer)\n\n    ReactDom.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n     document.getElementById('root')\n    );\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}